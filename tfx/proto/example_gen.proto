// Copyright 2019 Google LLC. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package tfx.components.example_gen;

import "google/protobuf/any.proto";

message Input {
  // List of split name and input glob pattern pairs.
  //
  // 'name' shouldn't be empty and must be unique within the list.
  //
  // 'pattern' is a glob relative file pattern that maps to input files with
  //   root directory given by input base path. Some ExampleGen might take the
  //   pattern as something other than file pattern, e.g. BigQuery.
  //
  // A Span is a grouping of training examples. If your data is persisted on a
  // filesystem, each Span may be stored in a separate directory. The semantics
  // of a Span are not hardcoded into TFX; a Span may correspond to a day of
  // data, an hour of data, or any other grouping that is meaningful to your
  // task.
  //
  // Each Span can hold multiple Versions of data. To give an example, if you
  // remove some examples from a Span because of wipeout compliance, this could
  // result in a new Version of that Span. By default, TFX components operate on
  // the latest Version within a Span.
  //
  // Each Version within a Span can further be subdivided into multiple Splits.
  // The most common use-case for splitting a Span is to split it into training
  // and eval data.
  //
  // [SPAN spec]
  //   - '{SPAN}', for using in pattern below to retrieve span number.
  //   - This spec matches digits and maps the data into the relevant SPAN
  //     numbers. e.g. 'data_{SPAN}-*.tfrecord' will collect files like
  //     'data_12-a.tfrecord', 'date_12-b.tfrecord'.
  //   - When SPAN spec is missing, it's assumed to be always Span 0.
  //   - If SPAN is specified, pipeline will process the latest span, and store
  //     the span number in metadata.
  //
  // [VERSION spec]
  //   - '{VERSION}', for using in pattern below to retrieve version number.
  //   - This spec matches to non-zero padding digits and maps the data to
  //     the relvant VERSION numbers under the SPAN.
  //   - When VERSION spec is missing, version is set to be None.
  //   - If SPAN and VERSION are both specified, pipeline will process the
  //     latest version for the latest span, and store the version number in
  //     metadata.
  //   - If VERSION is specified, but not SPAN, an error will be thrown.
  //
  // TODO(b/162622803): add default behavior for when version spec not present.
  // TODO(jyzhao): support date spec.
  // TODO(jyzhao): support range config for define certain spans to process.
  message Split {
    string name = 1;
    string pattern = 2;
  }
  repeated Split splits = 1;
}

// Optional specified configuration for example gen.
message CustomConfig {
  google.protobuf.Any custom_config = 1;
}

// Enum to indicate payload format that ExampleGen produces.
enum PayloadFormat {
  // Unknown or unspecified.
  FORMAT_UNSPECIFIED = 0;

  // Serialized tf.train.Example protocol buffer.
  FORMAT_TF_EXAMPLE = 6;

  // Serialized tf.train.SequenceExample protocol buffer.
  FORMAT_TF_SEQUENCE_EXAMPLE = 7;

  // Serialized any protocol buffer.
  FORMAT_PROTO = 11;

  reserved 1 to 5, 8 to 10, 12 to max;
}

// Specification of the output of the example gen.
message Output {
  // Specifies how the output should be split. If not specified, the output
  // will have the same split as the input. If specified, then there should
  // only be one input split.
  SplitConfig split_config = 3;

  reserved 1, 2, 4;
}

// A config to partition examples into splits.
message SplitConfig {
  // Currently, if split config is specified, it must contains both 'train' and
  // 'eval' split.
  //
  // Splits.hash_buckets determine how splits are assigned for each example
  // from this hash output. Number of hash buckets are created according to the
  // given bucket counts, then examples are assigned in order.
  //
  // For example, for the following config
  //   {
  //     splits: [{name:'train' hash_buckets:60},
  //              {name:'test'  hash_buckets:10},
  //              {name:'eval'  hash_buckets:20}]
  //   }
  // m = mod(hash(id), 60+10+20) will be calculated.
  // Then,
  //   if m < 60: example belongs to Split-train
  //   if m >= 60 && m < 60+10: example belongs to Split-test
  //   if m >= 60+10: example belongs to Split-eval.
  //
  // Note that buckets [train:6, test:1, eval:2] might result in different
  // mapping of examples to splits from [60, 10, 20]. Also the order is
  // important, so that [eval:20, test:10, train:60] will give different splits.
  //
  // By design, [train:60, test1:5, test2:5, eval:20] would divide the middle
  // split into two without changing the first and the last splits.
  message Split {
    string name = 1;
    uint32 hash_buckets = 2;

    reserved 3;
  }
  repeated Split splits = 1;

  // Additional configurations of the supported splitting_method.
  oneof splitting_method_config {
    // When using `hash_buckets` splitting method, instead of the entire record,
    // one can use a feature for partitioning the examples. If it's not empty,
    // ExampleGen will use a fingerprint of that feature as the partition key.
    //
    // This feature can be used to maintain a stable split w.r.t. certain
    // properties of examples: for example, a user will always be put in the
    // same split if "user_id" were selected as the partition feature name.
    //
    // The interpretation of what a "feature" means and how to match a "feature"
    // with the specified name depends on the ExampleGen implementation and the
    // type of the examples.
    //
    // For ready-made ExampleGen implementations:
    //   - If it generates tf.Example, then a "feature" means an entry in
    //     tf.Example.features.feature.
    //   - If it generates tf.SequenceExample, then a "feature" means an entry
    //     in tf.SequenceExample.context.feature.
    //   - Only bytes_list and int64_list features are supported.
    string partition_feature_name = 2;
  }
}
